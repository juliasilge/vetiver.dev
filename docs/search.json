[
  {
    "objectID": "get-started/monitor.html",
    "href": "get-started/monitor.html",
    "title": "Monitor",
    "section": "",
    "text": "Once a model is deployed, it is important to continue monitoring the model. Machine learning breaks quietly, that is, a model can continue running without error, even if it is performing poorly. Without monitoring for degradation, this can continue undiagnosed. Vetiver offers functions to quickly run, store, and plot model metrics. These functions are particularly suited to measure one model with multiple performance metrics over a period of time.\nWhen a model is deployed, data comes in over time, regardless of if time is a feature for prediction. Even if your model does not explicitly use dates, it can affect your model performance."
  },
  {
    "objectID": "get-started/monitor.html#build-a-model-and-model-board",
    "href": "get-started/monitor.html#build-a-model-and-model-board",
    "title": "Monitor",
    "section": "Build a model and model board",
    "text": "Build a model and model board\n\nRPython\n\n\n\n\nShow the code from previous steps\nlibrary(tidymodels)\nlibrary(tidyverse)\ncar_mod <-\n    workflow(mpg ~ ., linear_reg()) %>%\n    fit(mtcars)\n\n\n\n\n\n\nShow the code from previous steps\nfrom vetiver.data import mtcars\nfrom sklearn import linear_model\n\ncar_mod = linear_model.LinearRegression().fit(mtcars.drop(columns=\"mpg\"), mtcars[\"mpg\"])"
  },
  {
    "objectID": "get-started/monitor.html#compute-metrics",
    "href": "get-started/monitor.html#compute-metrics",
    "title": "Monitor",
    "section": "Compute metrics",
    "text": "Compute metrics\nYou can compute multiple metrics at once over a certain time aggregation.\n\nRPython\n\n\n\nlibrary(vetiver)\nnew_cars <- read_csv(\"https://vetiver.rstudio.com/get-started/new-cars.csv\")\noriginal_metrics <-\n    augment(car_mod, new_data = new_cars) %>%\n    vetiver_compute_metrics(date_obs, \"week\", mpg, .pred, every = 1L)\n\noriginal_metrics\n\n# A tibble: 24 × 5\n   .index        .n .metric .estimator .estimate\n   <date>     <int> <chr>   <chr>          <dbl>\n 1 2022-03-15     2 rmse    standard       2.75 \n 2 2022-03-15     2 rsq     standard       1    \n 3 2022-03-15     2 mae     standard       2.59 \n 4 2022-03-17     7 rmse    standard       1.70 \n 5 2022-03-17     7 rsq     standard       0.938\n 6 2022-03-17     7 mae     standard       1.41 \n 7 2022-03-24     7 rmse    standard       2.24 \n 8 2022-03-24     7 rsq     standard       0.688\n 9 2022-03-24     7 mae     standard       1.81 \n10 2022-03-31     7 rmse    standard       1.60 \n# … with 14 more rows\n\n\n\n\n\nimport vetiver\n\nimport pandas as pd\nfrom sklearn import metrics\nfrom datetime import timedelta\n\nnew_cars = pd.read_csv(\"https://vetiver.rstudio.com/get-started/new-cars.csv\")\nnew_cars[\"preds\"] = car_mod.predict(new_cars.drop(columns=[\"date_obs\", \"mpg\"]))\n\nmetric_set = [metrics.mean_absolute_error, metrics.mean_squared_error, metrics.r2_score]\ntd = timedelta(weeks = 1)\n\noriginal_metrics = vetiver.compute_metrics(data = new_cars, \n                    date_var=\"date_obs\", \n                    period = td, \n                    metric_set=metric_set, \n                    truth=\"mpg\", \n                    estimate=\"preds\")\noriginal_metrics.head(6)\n\n       index  n               metric  estimate\n0 2022-03-15  7  mean_absolute_error  1.572021\n1 2022-03-15  7   mean_squared_error  3.561911\n2 2022-03-15  7             r2_score  0.898821\n3 2022-03-22  7  mean_absolute_error  1.562652\n4 2022-03-22  7   mean_squared_error  3.245496\n5 2022-03-22  7             r2_score  0.878289"
  },
  {
    "objectID": "get-started/monitor.html#pin-metrics",
    "href": "get-started/monitor.html#pin-metrics",
    "title": "Monitor",
    "section": "Pin metrics",
    "text": "Pin metrics\nThe first time you pin metrics, you can write to a board as normal. However, when adding new metrics to your pin, you may have dates that overlap with with the original pin, such as our new_metrics here. You can choose how to handle these dates by using the overwrite argument.\n\nRPython\n\n\n\nlibrary(pins)\nboard <- board_temp()\npin_write(board, original_metrics, \"lm_fit_metrics\")\n\nnew_metrics <-\n    augment(car_mod, new_data = new_cars) %>%\n    vetiver_compute_metrics(date_obs, \"week\", mpg, .pred, every = 1L)\n\nvetiver_pin_metrics(board, new_metrics, \"lm_fit_metrics\", overwrite = TRUE)\n\n# A tibble: 24 × 5\n   .index        .n .metric .estimator .estimate\n   <date>     <int> <chr>   <chr>          <dbl>\n 1 2022-03-15     2 rmse    standard       2.75 \n 2 2022-03-15     2 rsq     standard       1    \n 3 2022-03-15     2 mae     standard       2.59 \n 4 2022-03-17     7 rmse    standard       1.70 \n 5 2022-03-17     7 rsq     standard       0.938\n 6 2022-03-17     7 mae     standard       1.41 \n 7 2022-03-24     7 rmse    standard       2.24 \n 8 2022-03-24     7 rsq     standard       0.688\n 9 2022-03-24     7 mae     standard       1.81 \n10 2022-03-31     7 rmse    standard       1.60 \n# … with 14 more rows\n\n\n\n\n\nimport vetiver\nimport pins\n\nboard = pins.board_temp(allow_pickle_read = True)\nboard.pin_write(original_metrics, \"lm_fit_metrics\", type = \"csv\")\n\nMeta(title='lm_fit_metrics: a pinned 21 x 4 DataFrame', description=None, created='20220715T173343Z', pin_hash='1484358d3ee2bab6', file='lm_fit_metrics.csv', file_size=1024, type='csv', api_version=1, version=Version(created=datetime.datetime(2022, 7, 15, 17, 33, 43, 685382), hash='1484358d3ee2bab6'), name='lm_fit_metrics', user={})\n\nWriting pin:\nName: 'lm_fit_metrics'\nVersion: 20220715T173343Z-14843\n\nnew_metrics = vetiver.compute_metrics(data = new_cars, \n                    date_var=\"date_obs\", \n                    period = td, \n                    metric_set=metric_set, \n                    truth=\"mpg\", \n                    estimate=\"preds\")\n                    \nvetiver.pin_metrics(board, new_metrics, \"lm_fit_metrics\", overwrite = True)\n\n        index  n               metric  estimate\n0  2022-03-15  7  mean_absolute_error  1.572021\n1  2022-03-15  7   mean_squared_error  3.561911\n2  2022-03-15  7             r2_score  0.898821\n3  2022-03-22  7  mean_absolute_error  1.562652\n4  2022-03-22  7   mean_squared_error  3.245496\n5  2022-03-22  7             r2_score  0.878289\n6  2022-03-29  7  mean_absolute_error  1.738432\n7  2022-03-29  7   mean_squared_error  5.302954\n8  2022-03-29  7             r2_score  0.843334\n11 2022-04-05  7             r2_score  0.792356\n10 2022-04-05  7   mean_squared_error  4.216742\n9  2022-04-05  7  mean_absolute_error  1.737853\n12 2022-04-12  7  mean_absolute_error  1.560125\n13 2022-04-12  7   mean_squared_error  3.338802\n14 2022-04-12  7             r2_score  0.847371\n15 2022-04-19  7  mean_absolute_error  2.216515\n16 2022-04-19  7   mean_squared_error  6.008295\n17 2022-04-19  7             r2_score  0.495696\n18 2022-04-26  7  mean_absolute_error  1.298632\n19 2022-04-26  7   mean_squared_error  2.456600\n20 2022-04-26  7             r2_score  0.953456\n\nWriting pin:\nName: 'lm_fit_metrics'\nVersion: 20220715T173343Z-8621e"
  },
  {
    "objectID": "get-started/monitor.html#plot-metrics",
    "href": "get-started/monitor.html#plot-metrics",
    "title": "Monitor",
    "section": "Plot metrics",
    "text": "Plot metrics\nWith a metrics computed, it is essential to visualize metrics to have an overview of the model performance.\n\nRPython\n\n\n\nlibrary(ggplot2)\nvetiver_plot_metrics(new_metrics) +\n    scale_size(range = c(2, 4))\n\n\n\n\n\n\n\np = vetiver.plot_metrics(df_metrics = new_metrics)\np.show()"
  },
  {
    "objectID": "get-started/monitor.html#dashboarding",
    "href": "get-started/monitor.html#dashboarding",
    "title": "Monitor",
    "section": "Dashboarding",
    "text": "Dashboarding\nThe vetiver package provides an R Markdown template for creating a monitoring dashboard for pinned metrics. The template automates extracting some information from the metrics, and provides a framework to extend the dashboard with custom monitoring implementation."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About vetiver",
    "section": "",
    "text": "Development of vetiver is sponsored by RStudio, PBC."
  },
  {
    "objectID": "about.html#is-vetiver-open-source",
    "href": "about.html#is-vetiver-open-source",
    "title": "About vetiver",
    "section": "Is vetiver open source?",
    "text": "Is vetiver open source?\nThe vetiver Python and R packages are released under the MIT license."
  },
  {
    "objectID": "about.html#what-are-different-ways-you-can-contribute",
    "href": "about.html#what-are-different-ways-you-can-contribute",
    "title": "About vetiver",
    "section": "What are different ways you can contribute?",
    "text": "What are different ways you can contribute?\n\nAnswer questions\nYou can help others use and learn vetiver by answering questions on the RStudio community site, Stack Overflow, and Twitter. Many people asking for help with vetiver don’t know what a reproducible example or “reprex” is, or how to craft one. Acknowledging an individual’s problem, showing them how to build a reprex, and pointing them to helpful resources are all enormously beneficial, even if you don’t immediately solve their problem.\nRemember that while you might have seen a problem a hundred times before, it’s new to the person asking it. Be patient, polite, and empathetic.\n\n\nFile issues\nIf you’ve found a bug, first create a minimal reproducible example. Spend some time working to make it as minimal as possible; the more time you spend doing this, the easier it is to fix the bug. When your reprex is ready, file it on the GitHub repo of the appropriate package, either Python or R.\nThe vetiver team often focuses on one package at a time to reduce context switching and be more efficient. We may not address each issue right away, but we will use the reproducible example you create to understand your problem when it is time to focus on that package.\n\n\nContribute documentation\nDocumentation is a high priority for vetiver, and pull requests to correct or improve documentation are welcome.\n\n\nContribute code\nIf you are a more experienced R or Python programmer, you may have the inclination, interest, and ability to contribute directly to package development. Before you submit a pull request to vetiver, always file an issue and confirm the vetiver team agrees with your idea and is happy with your basic proposal.\nWe use the tidyverse style guide for R and the PEP 8 style guide for Python. Using a style guide keeps your new code and documentation matching the existing style, and makes the review process much smoother."
  },
  {
    "objectID": "get-started/deploy.html",
    "href": "get-started/deploy.html",
    "title": "Deploy",
    "section": "",
    "text": "RPython\n\n\n\n\nShow the code from previous steps\nlibrary(tidymodels)\nlibrary(vetiver)\nlibrary(pins)\n\ncar_mod <-\n    workflow(mpg ~ ., decision_tree(mode = \"regression\")) %>%\n    fit(mtcars)\nv <- vetiver_model(car_mod, \"cars_mpg\")\nmodel_board <- board_folder(\".\", versioned = TRUE)\nmodel_board %>% vetiver_pin_write(v)\n\n\n\n\n\n\nShow the code from previous steps\nfrom vetiver.data import mtcars\nfrom vetiver import VetiverModel, vetiver_pin_write\nfrom sklearn import tree\nfrom pins import board_folder\n\ncar_mod = tree.DecisionTreeRegressor().fit(mtcars, mtcars[\"mpg\"])\n\nv = VetiverModel(car_mod, model_name = \"cars_mpg\", \n                 save_ptype = True, ptype_data = mtcars)\n\nmodel_board = board_folder(\".\", allow_pickle_read=True)\nvetiver_pin_write(model_board, v)\n\n\nWriting pin:\nName: 'cars_mpg'\nVersion: 20220715T162650Z-73101"
  },
  {
    "objectID": "get-started/deploy.html#create-a-rest-api-for-deployment",
    "href": "get-started/deploy.html#create-a-rest-api-for-deployment",
    "title": "Deploy",
    "section": "Create a REST API for deployment",
    "text": "Create a REST API for deployment\nYou can deploy your model by creating a special Plumber router in R or a FastAPI router in Python, and adding a POST endpoint for making predictions.\n\nRPython\n\n\n\nlibrary(plumber)\npr() %>%\n  vetiver_api(v)\n\n# Plumber router with 2 endpoints, 4 filters, and 1 sub-router.\n# Use `pr_run()` on this object to start the API.\n├──[queryString]\n├──[body]\n├──[cookieParser]\n├──[sharedSecret]\n├──/logo\n│  │ # Plumber static router serving from directory: /Library/Frameworks/R.framework/Versions/4.1-arm64/Resources/library/vetiver\n├──/ping (GET)\n└──/predict (POST)\n\n\nTo start a server using this object, pipe (%>%) to pr_run(port = 8080) or your port of choice.\n\n\n\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_ptype = True)\n\nTo start a server using this object, use app.run(port = 8080) or your port of choice.\n\n\n\nYou can interact with your vetiver API via automatically generated, detailed visual documentation.\n\n\n\n\n\n\n\n\n\n\n\n\nFastAPI and Plumber APIs such as these can be hosted in a variety of ways. You can create a ready-to-go file for deployment that is especially suited for RStudio Connect.\n\nRPython\n\n\n\nvetiver_write_plumber(model_board, \"cars_mpg\")\n\n\n\n# Generated by the vetiver package; edit with care\n\nlibrary(pins)\nlibrary(plumber)\nlibrary(rapidoc)\nlibrary(vetiver)\n\n# Packages needed to generate model predictions\nif (FALSE) {\n    library(parsnip)\n    library(rpart)\n    library(workflows)\n}\nb <- board_folder(path = \".\")\nv <- vetiver_pin_read(b, \"cars_mpg\", version = \"20220715T202648Z-67ad7\")\n\n#* @plumber\nfunction(pr) {\n    pr %>% vetiver_api(v)\n}\n\n\nFor RStudio Connect, you can streamline this deployment process even more by using vetiver_deploy_rsconnect(model_board, \"cars_mpg\").\n\n\n\napp_file = vetiver.write_app(model_board, \"cars_mpg\")\n\n\n\nfrom vetiver import VetiverModel\nimport vetiver\nimport pins\n\n\nb = pins.board_folder('.', allow_pickle_read=True)\nv = VetiverModel.from_pin(b, 'cars_mpg', version = '20220715T162650Z-73101')\n\nvetiver_api = vetiver.VetiverAPI(v)\napi = vetiver_api.app\n\n\n\n\n\nIn a real-world situation, you would see something like board_rsconnect() or board_s3() here instead of our temporary demo board.\n\n\n\n\n\n\nImportant\n\n\n\nNotice that the deployment is strongly linked to a specific version of the pinned model; if you pin another version of the model after you deploy your model, your deployed model will not be affected."
  },
  {
    "objectID": "get-started/deploy.html#generate-a-dockerfile",
    "href": "get-started/deploy.html#generate-a-dockerfile",
    "title": "Deploy",
    "section": "Generate a Dockerfile",
    "text": "Generate a Dockerfile\nFor deploying a vetiver API to infrastructure other than RStudio Connect, such as Google Cloud Run, AWS, or Azure, you likely will want to build a Docker container.\n\n\n\n\n\n\nNote\n\n\n\nYou can use any pins board with Docker, like board_folder() or board_rsconnect(), as long as your Docker container can authenticate to your pins board.\n\n\n\nRPython\n\n\n\nvetiver_write_docker(v)\n\n\n\n# Generated by the vetiver package; edit with care\n\nFROM rocker/r-ver:4.1.2\nENV RENV_CONFIG_REPOS_OVERRIDE https://packagemanager.rstudio.com/cran/latest\n\nRUN apt-get update -qq && apt-get install -y --no-install-recommends \\\n  libcurl4-openssl-dev \\\n  libicu-dev \\\n  libsodium-dev \\\n  libssl-dev \\\n  make\n\nCOPY vetiver_renv.lock renv.lock\nRUN Rscript -e \"install.packages('renv')\"\nRUN Rscript -e \"renv::restore()\"\nCOPY plumber.R /opt/ml/plumber.R\nEXPOSE 8000\nENTRYPOINT [\"R\", \"-e\", \"pr <- plumber::plumb('/opt/ml/plumber.R'); pr$run(host = '0.0.0.0', port = 8000)\"]\n\n\nWhen you run vetiver_write_docker(), you generate two files: the Dockerfile itself and the renv.lock file to capture your model dependencies.\n\n\n\nvetiver.write_docker(app_file)\n\n\n\n# # Generated by the vetiver package; edit with care\n# start with python base image\nFROM python:3.9\n\n# create directory in container for vetiver files\nWORKDIR /vetiver\n\n# copy  and install requirements\nCOPY vetiver_requirements.txt /vetiver/requirements.txt\n\n#\nRUN pip install --no-cache-dir --upgrade -r /vetiver/requirements.txt\n\n# copy app file\nCOPY ./app.py /vetiver/app\n\n# expose port\nEXPOSE 8080\n\n# run vetiver API\nCMD [\"uvicorn\", \"app.app:api\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n\n\nTo build the Docker image, you need two files: the Dockerfile itself generated via vetiver_write_docker() and a requirements.txt file to capture your model dependencies. If you don’t already have a requirements file for your project, vetiver.load_pkgs() will generate one for you, with the name vetiver_requirements.txt.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nWhen you build such a Docker container with docker build, all the packages needed to make a prediction with your model are installed into the container.\nWhen you run the Docker container, you can pass in environment variables (for authentication to your pins board, for example) with docker run --env-file .Renviron."
  },
  {
    "objectID": "get-started/deploy.html#predict-from-your-model-endpoint",
    "href": "get-started/deploy.html#predict-from-your-model-endpoint",
    "title": "Deploy",
    "section": "Predict from your model endpoint",
    "text": "Predict from your model endpoint\nA model deployed via vetiver can be treated as a special vetiver_endpoint() object.\n\nRPython\n\n\n\nendpoint <- vetiver_endpoint(\"http://127.0.0.1:8080/predict\")\nendpoint\n\n\n── A model API endpoint for prediction: \nhttp://127.0.0.1:8080/predict\n\n\n\n\n\nfrom vetiver.server import predict, vetiver_endpoint\nendpoint = vetiver_endpoint(\"http://127.0.0.1:8080/predict/\")\nendpoint\n\n'http://127.0.0.1:8080/predict/'\n\n\n\n\n\nIf such a deployed model endpoint is running via one process (either remotely on a server or locally, perhaps via a background job in the RStudio IDE), you can make predictions with that deployed model and new data in another, separate process1.\n\nRPython\n\n\n\nnew_car <- tibble(cyl = 4,  disp = 200, \n                  hp = 100, drat = 3,\n                  wt = 3,   qsec = 17, \n                  vs = 0,   am = 1,\n                  gear = 4, carb = 2)\npredict(endpoint, new_car)\n\n# A tibble: 11 × 1\n   .pred\n   <chr>      \n 1 22.3       \n\n\n\nimport pandas as pd\nnew_car_dict = {\"cyl\": [4], \"disp\": [200], \n                 \"hp\": [100], \"drat\": [3],\n                 \"wt\": [3], \"qsec\": [17], \n                 \"vs\": [0], \"am\": [1],\n                 \"gear\": [4], \"carb\": [2]}\nnew_car = pd.DataFrame(new_car_dict)\npredict(endpoint, new_car)\n\n  prediction\n0       21.0\n\n\n\nBeing able to predict with a vetiver model endpoint takes advantage of the model’s input data prototype and other metadata that is stored with the model."
  },
  {
    "objectID": "get-started/index.html",
    "href": "get-started/index.html",
    "title": "Getting Started",
    "section": "",
    "text": "The vetiver framework for MLOps tasks is built for data science teams using R and/or Python, with a native, fluent experience for both. It is built to be extensible, with methods that can support many kinds of models."
  },
  {
    "objectID": "get-started/index.html#installation",
    "href": "get-started/index.html#installation",
    "title": "Getting Started",
    "section": "Installation",
    "text": "Installation\n\nRPython\n\n\nYou can use vetiver with:\n\na tidymodels workflow\ncaret\nmlr3\nXGBoost\nranger\nlm() and glm()\n\nYou can install the released version of vetiver from CRAN:\n\ninstall.packages(\"vetiver\")\n\nAnd the development version from GitHub with:\n\n# install.packages(\"devtools\")\ndevtools::install_github(\"tidymodels/vetiver-r\")\n\n\n\nYou can use vetiver with:\n\nscikit-learn\nPyTorch\n\nYou can install the released version of vetiver from PyPI:\n\npython -m pip install vetiver\n\nAnd the development version from GitHub with:\n\npython -m pip install git+https://github.com/rstudio/vetiver-python"
  },
  {
    "objectID": "get-started/index.html#train-a-model",
    "href": "get-started/index.html#train-a-model",
    "title": "Getting Started",
    "section": "Train a model",
    "text": "Train a model\nFor this example, let’s work with data on fuel efficiency for cars to predict miles per gallon.\n\nRPython\n\n\nLet’s consider one kind of model supported by vetiver, a tidymodels workflow that encompasses both feature engineering and model estimation.\n\nlibrary(tidymodels)\n\ncar_mod <-\n    workflow(mpg ~ ., linear_reg()) %>%\n    fit(mtcars)\n\n\n\nLet’s consider one kind of model supported by vetiver, a scikit-learn linear model.\n\nfrom vetiver.data import mtcars\nfrom sklearn import linear_model\n\ncar_mod = linear_model.LinearRegression().fit(mtcars, mtcars[\"mpg\"])\n\n\n\n\nThis car_mod object is a fitted model, with model parameters estimated using mtcars."
  },
  {
    "objectID": "get-started/index.html#create-a-vetiver-model",
    "href": "get-started/index.html#create-a-vetiver-model",
    "title": "Getting Started",
    "section": "Create a vetiver model",
    "text": "Create a vetiver model\nWe can create a vetiver_model() in R or VetiverModel() in Python from the trained model; a vetiver model object collects the information needed to store, version, and deploy a trained model.\n\nRPython\n\n\n\nlibrary(vetiver)\nv <- vetiver_model(car_mod, \"cars_mpg\")\nv\n\n\n── cars_mpg ─ <butchered_workflow> model for deployment \nA lm regression modeling workflow using 10 features\n\n\n\n\n\nfrom vetiver import VetiverModel\nv = VetiverModel(car_mod, model_name = \"cars_mpg\", \n                 save_ptype = True, ptype_data = mtcars)\nv.description\n\n\"Scikit-learn <class 'sklearn.linear_model._base.LinearRegression'> model\"\n\n\n\n\n\nThink of this vetiver model as a deployable model object."
  },
  {
    "objectID": "get-started/version.html",
    "href": "get-started/version.html",
    "title": "Version",
    "section": "",
    "text": "RPython\n\n\n\n\nShow the code from previous steps\nlibrary(tidymodels)\nlibrary(vetiver)\n\ncar_mod <-\n    workflow(mpg ~ ., linear_reg()) %>%\n    fit(mtcars)\nv <- vetiver_model(car_mod, \"cars_mpg\")\n\n\n\n\n\n\nShow the code from previous steps\nfrom vetiver.data import mtcars\nfrom vetiver import VetiverModel\nfrom sklearn import linear_model\n\ncar_mod = linear_model.LinearRegression().fit(mtcars, mtcars[\"mpg\"])\n\nv = VetiverModel(car_mod, model_name = \"cars_mpg\", \n                 save_ptype = True, ptype_data = mtcars)"
  },
  {
    "objectID": "get-started/version.html#store-and-version-your-model",
    "href": "get-started/version.html#store-and-version-your-model",
    "title": "Version",
    "section": "Store and version your model",
    "text": "Store and version your model\nYou can store and version your model by choosing a pins “board” for it. Your board for model pins can be set up to use a local folder, RStudio Connect, Amazon S3, and more. When we write the vetiver model to our board, the binary model object is stored on our board together with necessary metadata, like the packages needed to make a prediction and the model’s input data prototype for checking new data at prediction time.\n\n\n\n\n\n\nNote\n\n\n\nWe’ll use a temporary board that will be automatically deleted for this demo, but for your real work, you will want to choose the best board for your particular infrastructure.\n\n\n\nRPython\n\n\nMost pins boards have versioning turned on by default, but we can turn it on explicitly for our temporary demo board.\n\nlibrary(pins)\nmodel_board <- board_temp(versioned = TRUE)\nmodel_board %>% vetiver_pin_write(v)\n\n\n\n\nfrom pins import board_temp\nfrom vetiver import vetiver_pin_write\nmodel_board = board_temp(versioned = True, allow_pickle_read = True)\nvetiver_pin_write(model_board, v)\n\nWriting pin:\nName: 'cars_mpg'\nVersion: 20220715T162701Z-fe310\n\n\n\n\n\nLet’s train a new kind of model for mtcars, a decision tree instead of our original linear model.\n\n\n\n\nRPython\n\n\n\ncar_mod <-\n    workflow(mpg ~ ., decision_tree(mode = \"regression\")) %>%\n    fit(mtcars)\n\nv <- vetiver_model(car_mod, \"cars_mpg\")\n\nmodel_board %>% vetiver_pin_write(v)\n\nCreating new version '20220715T202702Z-1484c'\nWriting to pin 'cars_mpg'\n\n\n\n\n\nfrom sklearn import tree\ncar_mod = tree.DecisionTreeRegressor().fit(mtcars, mtcars[\"mpg\"])\n\nv = VetiverModel(car_mod, model_name = \"cars_mpg\", \n                 save_ptype = True, ptype_data = mtcars)\nvetiver_pin_write(model_board, v)\n\nWriting pin:\nName: 'cars_mpg'\nVersion: 20220715T162702Z-984a2\n\n\n\n\n\nBoth versions are stored, and we have access to both.\n\nRPython\n\n\n\nmodel_board %>% pin_versions(\"cars_mpg\")\n\n# A tibble: 2 × 3\n  version                created             hash \n  <chr>                  <dttm>              <chr>\n1 20220715T202700Z-a85df 2022-07-15 16:27:00 a85df\n2 20220715T202702Z-1484c 2022-07-15 16:27:00 1484c\n\n\n\n\n\nmodel_board.pin_versions(\"cars_mpg\")\n\n              created   hash                 version\n0 2022-07-15 16:27:01  fe310  20220715T162701Z-fe310\n1 2022-07-15 16:27:02  984a2  20220715T162702Z-984a2\n\n\n\n\n\nThe primary purpose of pins is to make it easy to share data artifacts, so depending on the board you choose, your pinned vetiver model can be shareable with your collaborators."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLOps with vetiver",
    "section": "",
    "text": "Vetiver, the oil of tranquility, is used as a stabilizing ingredient in perfumery to preserve more volatile fragrances.\n\nThe goal of vetiver is to provide fluent tooling to version, deploy, and monitor a trained model. Functions handle both recording and checking the model’s input data prototype, and predicting from a remote API endpoint.\n\n\n\n\n\n\n\n\n\n\n\nData scientists have effective tools that they ❤️ to:\n\n\n\n\ncollect data\nprepare, manipulate, refine data\ntrain models\n\n\n\n\n\n\n\n\n\nThere is a lack 😩 of effective tools to:\n\n\n\n\nversion and publish models\nput models into production\nmonitor model performance\n\n\n\nUse vetiver to version and deploy your trained models.\n\nRPython\n\n\n\nlibrary(vetiver)\ncars_lm <- lm(mpg ~ ., data = mtcars)\nvetiver_model(cars_lm, \"cars_linear\")\n\n\n── cars_linear ─ <butchered_lm> model for deployment \nAn OLS linear regression model using 10 features\n\n\n\n\n\nfrom vetiver import VetiverModel\nfrom vetiver.data import mtcars\nfrom sklearn import linear_model\n\nmodel = linear_model.LinearRegression().fit(mtcars, mtcars[\"mpg\"])\nv = VetiverModel(model, model_name = \"cars_linear\", \n                 save_ptype = True, ptype_data = mtcars)\nv.description\n\n\"Scikit-learn <class 'sklearn.linear_model._base.LinearRegression'> model\""
  },
  {
    "objectID": "get-started/monitor.html#build-a-model",
    "href": "get-started/monitor.html#build-a-model",
    "title": "Monitor",
    "section": "Build a model",
    "text": "Build a model\n\nRPython\n\n\n\n\nShow the code from previous steps\nlibrary(tidymodels)\nlibrary(tidyverse)\n\ncar_mod <-\n    workflow(mpg ~ ., linear_reg()) %>%\n    fit(mtcars)\n\n\n\n\n\n\nShow the code from previous steps\nfrom vetiver.data import mtcars\nfrom sklearn import linear_model\n\ncar_mod = linear_model.LinearRegression().fit(mtcars.drop(columns=\"mpg\"), mtcars[\"mpg\"])"
  }
]